{

    // *** coc settings:
    //   :h coc-config
    //
    // "codeLens.enable": false, // PRN disable this if slow too, so far only big issues are with inlay hints
    //
    "inlayHint.enable": false, // slow and get in the way (i.e. type hints that aren't in actual code)
    // "inlayHint.position": "eol", // terrible idea! stick with inline, or none
    // "inlayHint.enableParameter": false, // can remove just param hints

    // code lens like inlay hints are a hot mess of slow to update and so when editing python they remain as if real code and not and you cannot tell until they refresh and leave and that is if you dont have a mistake in your indentation or code in which case they wont update
    "pyright.inlayHints.variableTypes": false,
    "pyright.inlayHints.parameterTypes": false,
    "pyright.inlayHints.functionReturnTypes": false,
    // coc-pyright provides formatters too
    // https://github.com/fannheyward/coc-pyright?tab=readme-ov-file#configurations
    "python.formatting.provider": "yapf",
    "python.formatting.yapfArgs": [
        "--style", "{column_limit: 200, ALLOW_SPLIT_BEFORE_DICT_VALUE: False}"

        // "{based_on_style: pep8, indent_width: 4}"
    ],


    // *** json
    // *** coc-json - (not prettier, see below)
    // keep empty lines, at least 1... so I can partition sections (i.e. in this file), newlines also help movement with vim {}
    "json.format.keepLines": true,
    // "json.format.defaultFormatter": "coc-json",
    // prettier dislikes for json:
    // - trim trailing commas (i.e. in this file, I like it when allowed, that said often its not allowed and then fails stuff so I am on fence)

    // *** prettier - so far, for markdown only
    // "prettier.formatterPriority": -1, // make prettier the fallback formatter (works but not needed as I can just disable it here:)
    "prettier.disableLanguages": [ "json" ], // *** using coc-json formatter for now
    "prettier.tabWidth": 4,

    // *** markdown:
    // markdownlint - for diagnostics
    // prettier - for formatting (and getting over 2 level indent, it really will be fine wes)
    // I mostly want formatting so my list indents are consistent and if it is only 2 then fine, I hate reformatting manually, esp when copying and pasting content that has other level of indent
    "markdownlint.config": {
        // rules: https://github.com/DavidAnson/markdownlint?tab=readme-ov-file#rules--aliases
        "MD007": {
            "indent": 2
            // https://github.com/DavidAnson/markdownlint/blob/main/doc/md007.md
            // default is 2 and doesn't respect .editorconfig NOR vim variables for tab size
        },
        "MD012": false,
        "line-length": false,
        "MD034": false, // no-bare-urls, I like them
        // FYI tag groups combine rules: https://github.com/DavidAnson/markdownlint?tab=readme-ov-file#tags (seems to only enable/disable though, so suboptions of similar rules cannot be set like can't do indent on all indent related rules
        // FYI I really just want some basic format consistency in spacing (i.e. after - list items) and don't give a RATS A about rules, that said if they don't get in my way they are fine
    },

    // *** lua:
    //   coc-lua options: https://github.com/josa42/coc-lua
    //     uses https://github.com/LuaLS/lua-language-server (yay, Zed's lua extension also uses this!)
    //        BUT, zed uses .luarc.json config files (not obviously coc-settings.json)... so I should move the settings to .luarc.json (entirely, or replicate there too)
    //        IIAC coc-settings.json applies to all projects/repos.. not just the one that houses my dotfiles repo's nvim config, so maybe use coc-settings.json as a set of global/default settings and then mirror those to luarc.json and then use luarc.json for project specific overrides?
    // other people use sumneko-lua... I got coc-lua to work just fine... btw make sure :CocConfig opens this file, else maybe your symlink is messed up from dotfiles repo
    // best way to test this config, open split view with config on top and on bottom a lua file with an issue, modify config and save it and it will refresh the lua file coc diagnostics immediately, but not if edited in another instance of VIM or not using VIM btw
    // the following config (workspace.library, runtime.version/path) were added to make vim globals work in coc-lua (not marked as undefined and have completions)
    "Lua.workspace.library": [
        // *** use .luarc.json for project specific settings
        // *** ONLY add paths for all repos/projects here
    ],
    // stop warning about luv:
    //   prompt:
    //     Do you need to configure your work environment as `luv`? (1)Apply and modify settings, (2)Apply but do not modify settings, (3)Don't show again:
    //   FYI selecting 3 does not stop it from showing again, every time I open nvim at all (b/c I am using luv in semantic daemon for special nvim windows in iterm)
    //   - discussion about warning: https://github.com/LunarVim/LunarVim/issues/4049
    //   https://github.com/xiyaowong/coc-sumneko-lua/blob/main/settings.md#luaworkspacecheckthirdparty
    //   - some sort of auto config for select 3rd party libs... I might want this then, right?
    "Lua.workspace.checkThirdParty": false, // *** ok for global for now
    //
    // TODO! do I want these global or project specific?
    "Lua.runtime.version": "LuaJIT",
    "Lua.runtime.path": [
        "?.lua",
        "?/init.lua",
    ],
    // lua LSP server has formatter builtin:
    // - LSP: https://github.com/LuaLS/lua-language-server/wiki/Formatter
    // *** use editorconfig to set lua format config unless I switch to another formatter like stylua?
    //   - formatter: https://github.com/CppCXY/EmmyLuaCodeStyle/blob/master/README_EN.md
    //   - options: https://github.com/CppCXY/EmmyLuaCodeStyle/blob/master/lua.template.editorconfig
    //
    // FYI editorconfig works for formatter settings (and appears to clobber defaultConfig here):
    // "Lua.format.defaultConfig": {
    //     // "max_line_length": "200",
    // },
    "Lua.diagnostics.globals": [
        // USE .luarc.json PROJECT SPECIFIC GLOBALS, not here... i.e. only dotfiles has vim/hs globals, I don't want those in every lua repo/workspace
    ],
    //
    // per https://github.com/UltiRequiem/coc-zig
    "zig.enabled": true,
    "zig.startUpMessage": true,
    "zig.path": "zls", // oddly enough I had to set this to zls? why isn't that default?
    "zig.debugLog": false,


    // rust
    // https://github.com/fannheyward/coc-rust-analyzer#configurations
    //    PRN rust-analyzer.*


    //
    // FYI another persons' config: https://raw.githubusercontent.com/oppara/dotfiles/611ea809e380d5b4e3e374568a85e52e744a429e/config/nvim/coc-settings.json
    "languageserver": {

        // *** csharp-ls ***
        // PRN try omnisharp-roslyn instead of csharp-ls (download archive from https://github.com/OmniSharp/omnisharp-roslyn/releases)
        //     and dotnet-format for formatting?
        // csharp-ls is supposed to be faster than omnisharp-roslyn, and not require heavy deps (i.e. mono on mac/linux)
        "csharp-ls": {
            // hit-enter - several long messages on startup, to avoid needing to hit Enter:
            //   happens when cmdheight=1 and not big enough to show full message (IIUC tT in shortmess don't apply to this b/c Ex mode)
            //   *** zoom out so messages fit
            //   *** hit `q` to stop listing messages (or j key, then use g< to see all messages if needed, before next cmd runs)
            //   set cmdheight=2 (yuck)
            //   see :h hit-enter (in message.txt)
            //       g< - see messages from last cmd (msgs before q)
            //
            "command": "csharp-ls",
            "filetypes": [ "cs" ],
            "rootPatterns": [ "*.csproj", ".vim/", ".git/", ".hg/" ],
        },

        // https://github.com/ndonfris/fish-lsp#client-configuration-required
        // https://github.com/ndonfris/fish-lsp-language-clients/tree/coc_minimal
        // config discussions: https://github.com/ndonfris/fish-lsp/discussions
        "fish-lsp": {
            "command": "fish-lsp",
            "filetypes": [
                "fish"
            ],
            "env": {
                // set env vars to configure lsp server options
                // https://github.com/ndonfris/fish-lsp?tab=readme-ov-file#environment-variables
                // 2003 is warning about universal variables in a non-interactive context, F it... I don't care... I use them in my ask-openai.fish script which is used in interactive contexts to change ask settings
                "fish_lsp_diagnostic_disable_error_codes": "2003 2001",
                // 2001 is non-escaped expansion variable in single quote string (fish-lsp 2001) => but that is precisely why I am using single quotes... so don't warn me that I might've mean to use double quotes... you are gonna flag legitimate use of the single quotes (in fact the entire purpose is arguably for this scenario)
            },
            "args": [
                "start"
            ],
            "revealOutputChannelOn": "info",
            "initializationOptions": {
                "workspaces": {
                    "paths": {
                        "defaults": [
                            // IIUC these provide paths for symbols and other definitions from primary fish config files and brew installed share/fish files
                            "$HOME/.config/fish",
                            "/opt/homebrew/share/fish",
                        ]
                    }
                }
            }
        },
    },
    "snippets.ultisnips.pythonPrompt": false,


    // *** POWERSHELL ***
    "powershell.integratedConsole.showOnStartup": false,
    // WTH it still flashes momentarily, WT WT WTF

    // *** clangd (c,cpp,etc) ***
    // clangd LS bundles clangd-format (do not need to install, IIUC)
    //   (https://clang.llvm.org/docs/ClangFormat.html)
    //   respects .clang-format
    //    generate with: clang-format -style=llvm -dump-config > .clang-format
    //
    //   formatting as you type experimental feature => DEAR GOD NO...
    //
    //  clangd config: https://clangd.llvm.org/config




}
