{

    // *** coc settings:
    //   :h coc-config
    //
    // "codeLens.enable": false, // PRN disable this if slow too, so far only big issues are with inlay hints
    //
    "inlayHint.enable": false, // slow and get in the way (i.e. type hints that aren't in actual code)
    // "inlayHint.position": "eol", // terrible idea! stick with inline, or none
    // "inlayHint.enableParameter": false, // can remove just param hints

    // code lens like inlay hints are a hot mess of slow to update and so when editing python they remain as if real code and not and you cannot tell until they refresh and leave and that is if you dont have a mistake in your indentation or code in which case they wont update
    "pyright.inlayHints.variableTypes": false,
    "pyright.inlayHints.parameterTypes": false,
    "pyright.inlayHints.functionReturnTypes": false,

    // *** json
    // *** coc-json - (not prettier, see below)
    // keep empty lines, at least 1... so I can partition sections (i.e. in this file), newlines also help movement with vim {}
    "json.format.keepLines": true,
    // "json.format.defaultFormatter": "coc-json",
    // prettier dislikes for json:
    // - trim trailing commas (i.e. in this file, I like it when allowed, that said often its not allowed and then fails stuff so I am on fence)
    // - force 2 spaces indent (can get over this)

    // *** prettier - so far, for markdown only
    // "prettier.formatterPriority": -1, // make prettier the fallback formatter (works but not needed as I can just disable it here:)
    "prettier.disableLanguages": [ "json" ], // *** using coc-json formatter for now

    // *** markdown:
    // markdownlint - for diagnostics
    // prettier - for formatting (and getting over 2 level indent, it really will be fine wes)
    // I mostly want formatting so my list indents are consistent and if it is only 2 then fine, I hate reformatting manually, esp when copying and pasting content that has other level of indent
    "markdownlint.config": {
        // rules: https://github.com/DavidAnson/markdownlint?tab=readme-ov-file#rules--aliases
        "MD007": {
            "indent": 2
            // https://github.com/DavidAnson/markdownlint/blob/main/doc/md007.md
            // default is 2 and doesn't respect .editorconfig NOR vim variables for tab size
        },
        "MD012": false,
        "line-length": false,
        "MD034": false, // no-bare-urls, I like them
        // FYI tag groups combine rules: https://github.com/DavidAnson/markdownlint?tab=readme-ov-file#tags (seems to only enable/disable though, so suboptions of similar rules cannot be set like can't do indent on all indent related rules
        // FYI I really just want some basic format consistency in spacing (i.e. after - list items) and don't give a RATS A about rules, that said if they don't get in my way they are fine
    },

    // *** lua:
    // other people use sumneko-lua... I got coc-lua to work just fine... btw make sure :CocConfig opens this file, else maybe your symlink is messed up from dotfiles repo
    // best way to test this config, open split view with config on top and on bottom a lua file with an issue, modify config and save it and it will refresh the lua file coc diagnostics immediately, but not if edited in another instance of VIM or not using VIM btw
    // the following config (workspace.library, runtime.version/path) were added to make vim globals work in coc-lua (not marked as undefined and have completions)
    "Lua.workspace.library": [
        "/opt/homebrew/Cellar/neovim/0.10.2_1/share/nvim/runtime/lua",
        "/opt/homebrew/Cellar/neovim/0.10.2_1/share/nvim/runtime/lua/vim/lsp",
    ],
    "Lua.runtime.version": "LuaJIT",
    "Lua.runtime.path": [
        "?.lua",
        "?/init.lua",
        "/opt/homebrew/Cellar/neovim/0.10.2_1/share/nvim/runtime/lua/vim"
    ],
    "Lua.diagnostics.globals": [
        "vim",
        "describe",
        "it",

        "assert",
        "assert.equals",
        "assert.is_true",
        "assert.is_false",
        "assert.is_nil",
        "assert.is_not_nil",

        "before_each",
        "after_each",
        "pending",
        "setup",
        "teardown",
    ],
    //
    // per https://github.com/UltiRequiem/coc-zig
    "zig.enabled": true,
    "zig.startUpMessage": true,
    "zig.path": "zls", // oddly enough I had to set this to zls? why isn't that default?
    "zig.debugLog": false,
    //
    // FYI another persons' config: https://raw.githubusercontent.com/oppara/dotfiles/611ea809e380d5b4e3e374568a85e52e744a429e/config/nvim/coc-settings.json
    "languageserver": {

        // *** csharp-ls ***
        // PRN try omnisharp-roslyn instead of csharp-ls (download archive from https://github.com/OmniSharp/omnisharp-roslyn/releases)
        //     and dotnet-format for formatting?
        // csharp-ls is supposed to be faster than omnisharp-roslyn, and not require heavy deps (i.e. mono on mac/linux)
        "csharp-ls": {
            // hit-enter - several long messages on startup, to avoid needing to hit Enter:
            //   happens when cmdheight=1 and not big enough to show full message (IIUC tT in shortmess don't apply to this b/c Ex mode)
            //   *** zoom out so messages fit
            //   *** hit `q` to stop listing messages (or j key)
            //   set cmdheight=2 (yuck)
            //   see :h hit-enter (in message.txt)
            //       g< - see messages from last cmd (msgs before q)
            //
            "command": "csharp-ls",
            "filetypes": [ "cs" ],
            "rootPatterns": [ "*.csproj", ".vim/", ".git/", ".hg/" ],
        },

        // https://github.com/ndonfris/fish-lsp#client-configuration-required
        // https://github.com/ndonfris/fish-lsp-language-clients/tree/coc_minimal
        "fish-lsp": {
            "command": "fish-lsp",
            "filetypes": [
                "fish"
            ],
            "args": [
                "start"
            ],
            "revealOutputChannelOn": "info",
            "initializationOptions": {
                "workspaces": {
                    "paths": {
                        "defaults": [
                            // IIUC these provide paths for symbols and other definitions from primary fish config files and brew installed share/fish files
                            "$HOME/.config/fish",
                            "/opt/homebrew/share/fish",
                        ]
                    }
                }
            }
        },
    },
}
