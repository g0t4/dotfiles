{

    // *** coc settings:
    //   :h coc-config
    //
    // "codeLens.enable": false, // PRN disable this if slow too, so far only big issues are with inlay hints
    //
    "inlayHint.enable": false, // slow and get in the way (i.e. type hints that aren't in actual code)
    // "inlayHint.position": "eol", // terrible idea! stick with inline, or none
    // "inlayHint.enableParameter": false, // can remove just param hints


    // *** pyright/python (w/ coc-pyright)
    //    by the way nothing was wrong with coc-pyright, AND it supports ruff as formatter/linter/etc
    //    TODO long term I wanna port over to builtin LSP client... see ruff docs for that https://docs.astral.sh/ruff/editors/setup/#vim
    // // code lens like inlay hints are a hot mess of slow to update and so when editing python they remain as if real code and not and you cannot tell until they refresh and leave and that is if you dont have a mistake in your indentation or code in which case they wont update
    // "pyright.inlayHints.variableTypes": false,
    // "pyright.inlayHints.parameterTypes": false,
    // "pyright.inlayHints.functionReturnTypes": false,
    // // coc-pyright provides formatters too
    // // https://github.com/fannheyward/coc-pyright?tab=readme-ov-file#configurations
    // "python.formatting.provider": "yapf",
    // "python.formatting.yapfArgs": [
    //     "--style", "{column_limit: 200, ALLOW_SPLIT_BEFORE_DICT_VALUE: False}"
    //
    //     // "{based_on_style: pep8, indent_width: 4}"
    // ],
    // *** ruff/coc-ruff
    //   uv add ruff / pip install... per venv (naturally)
    //     check :CocCommand ruff.<TAB> to make sure its recognized by coc-ruff
    //     try formatting a document!
    //       ruff.executeFormat
    // TODO! how does ruff do as a formatter, I viscerally hate most python formatters (over complicated, obsession with fucking up my code, nonsense)
    //  see ruff-vscode for more settings: https://github.com/astral-sh/ruff-vscode
    // ok so GLOBAL ruff settings only here:
    //  https://docs.astral.sh/ruff/configuration/
    "ruff.lineLength": 320, // wtf why is there a max for the max lineLength?! ... I want a way to toggle changing lines off but I get it that's half of what all formatters do, tell you how to wrap lines...
    // FYI can override (globally here) individual settings from the ruff.toml file using this style:
    //    ruff format zsh/compat_fish/pythons/wcl.py --config "format.quote-style = 'preserve'"
    //    from the ruff format command's --config option
    // FFS... it does not respect --config... jesus christ fucking POS
    //      "ruff.format.args": [ "--config \"format.quote-style = 'preserve'\"" ]
    //    this literally works fine at the CLI... but not fucking here... I'll have to put this into every goddamn ruff.toml file
    // use pyproject.toml/ruff.toml for other settings
    //     setup a user specific pyproject.toml to share settings across projects
    //     example => quote-style
    // leave default quote-style of double is fine actually... only if I want `preserve` do I need ruff.toml or fix the broken shit above with --config




    // *** json
    // *** coc-json - (not prettier, see below)
    // keep empty lines, at least 1... so I can partition sections (i.e. in this file), newlines also help movement with vim {}
    // "json.format.defaultFormatter": "coc-json",
    "json.format.keepLines": true,
    "json.schemas": [
        {
            "fileMatch": [ ".luarc.json", ".luarc.jsonc" ],
            "url": "https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json"
        }
    ],
    "json.validate.enable": false, // really only care about completions/formatting for json
    // - if I could I would disable rules about "comments" and "trailing commas" but I can't find how to do that with coc-json
    // - BTW see filetypemods.lua to map json files to jsonc to stop comment spamming (use this if you wanna go back to validating json files)
    // - BTW to see what services are running for current window/buffer:  :CocList services
    //
    // * prettier instead => NO:
    // - trim trailing commas (i.e. in this file, I like it when allowed, that said often its not allowed and then fails stuff so I am on fence)

    // *** yaml
    // I AM SICK AND FUCKING TIRED OF YAML FORMATTERS... this one decides to remove new lines around comments and insert them... and change indents that I set on comments... so fuck it...
    //  formatting yaml is just about indentation and that it... so vim can handle it gg=G (done)
    "yaml.format.enable": false,

    // *** prettier - so far, for markdown only
    // "prettier.formatterPriority": -1, // make prettier the fallback formatter (works but not needed as I can just disable it here:)
    "prettier.disableLanguages": [ "json", "markdown", "yaml", ], // *** using coc-json formatter for now
    "prettier.tabWidth": 4,

    // *** markdown:
    // markdownlint - for diagnostics
    // prettier - for formatting (and getting over 2 level indent, it really will be fine wes)
    // I mostly want formatting so my list indents are consistent and if it is only 2 then fine, I hate reformatting manually, esp when copying and pasting content that has other level of indent
    "markdownlint.config": {
        // rules: https://github.com/DavidAnson/markdownlint?tab=readme-ov-file#rules--aliases
        "MD007": {
            "indent": 2
            // https://github.com/DavidAnson/markdownlint/blob/main/doc/md007.md
            // default is 2 and doesn't respect .editorconfig NOR vim variables for tab size
        },
        "MD012": false,
        "line-length": false,
        "MD034": false, // no-bare-urls, I like them
        // FYI tag groups combine rules: https://github.com/DavidAnson/markdownlint?tab=readme-ov-file#tags (seems to only enable/disable though, so suboptions of similar rules cannot be set like can't do indent on all indent related rules
        // FYI I really just want some basic format consistency in spacing (i.e. after - list items) and don't give a RATS A about rules, that said if they don't get in my way they are fine
    },

    // *** lua:
    //   coc-lua options: https://github.com/josa42/coc-lua
    //     uses https://github.com/LuaLS/lua-language-server (yay, Zed's lua extension also uses this!)
    //        BUT, zed uses .luarc.json config files (not obviously coc-settings.json)... so I should move the settings to .luarc.json (entirely, or replicate there too)
    //        IIAC coc-settings.json applies to all projects/repos.. not just the one that houses my dotfiles repo's nvim config, so maybe use coc-settings.json as a set of global/default settings and then mirror those to luarc.json and then use luarc.json for project specific overrides?
    // other people use sumneko-lua... I got coc-lua to work just fine... btw make sure :CocConfig opens this file, else maybe your symlink is messed up from dotfiles repo
    // best way to test this config, open split view with config on top and on bottom a lua file with an issue, modify config and save it and it will refresh the lua file coc diagnostics immediately, but not if edited in another instance of VIM or not using VIM btw
    // the following config (workspace.library, runtime.version/path) were added to make vim globals work in coc-lua (not marked as undefined and have completions)
    "Lua.workspace.library": [
        // *** use .luarc.json for project specific settings
        // *** ONLY add paths for all repos/projects here
    ],
    // stop warning about luv:
    //   prompt:
    //     Do you need to configure your work environment as `luv`? (1)Apply and modify settings, (2)Apply but do not modify settings, (3)Don't show again:
    //   FYI selecting 3 does not stop it from showing again, every time I open nvim at all (b/c I am using luv in semantic daemon for special nvim windows in iterm)
    //   - discussion about warning: https://github.com/LunarVim/LunarVim/issues/4049
    //   https://github.com/xiyaowong/coc-sumneko-lua/blob/main/settings.md#luaworkspacecheckthirdparty
    //   - some sort of auto config for select 3rd party libs... I might want this then, right?
    "Lua.workspace.checkThirdParty": false, // *** ok for global for now
    //
    // TODO! do I want these global or project specific?
    "Lua.runtime.version": "LuaJIT",
    "Lua.runtime.path": [
        "?.lua",
        "?/init.lua",
    ],
    // * call snippets = automatic function call snippets vs just func name completion
    // - Disable = just complete the function name
    // - Replace = complete the function name and step through args as if it were a snippet template
    // - Both = two entries per completion, f == function name only, S = snippet args
    // TRY BOTH b/c it shows the style I am used to first (function name only)
    //    - so I can opt in by selecting the second style when I want it
    "Lua.completion.callSnippet": "Both", // default is "Disable"
    // * keyword snippets - builtin snippets for keywords and/or keyword name completion
    // - Disable = just complete the keyword "name" only
    // - Replace = replace keyword snippets, with 1+ snippets with live arg tab stops
    //   - i.e. `for` => `for .. pairs`, `for .. ipairs`, `fori`
    // - Both = add back the keyword name only snippet
    // TRY "Replace" snippets only (don't waste space with name only?)
    "Lua.completion.keywordSnippet": "Replace", // default is "Replace"
    // lua LSP server has formatter builtin:
    // - LSP: https://github.com/LuaLS/lua-language-server/wiki/Formatter
    // *** use editorconfig to set lua format config unless I switch to another formatter like stylua?
    //   - formatter: https://github.com/CppCXY/EmmyLuaCodeStyle/blob/master/README_EN.md
    //   - options: https://github.com/CppCXY/EmmyLuaCodeStyle/blob/master/lua.template.editorconfig
    //
    // FYI editorconfig works for formatter settings (and appears to clobber defaultConfig here):
    // "Lua.format.defaultConfig": {
    //     // "max_line_length": "200",
    // },
    "Lua.diagnostics.globals": [
        // USE .luarc.json PROJECT SPECIFIC GLOBALS, not here... i.e. only dotfiles has vim/hs globals, I don't want those in every lua repo/workspace
    ],
    //
    // per https://github.com/UltiRequiem/coc-zig
    "zig.enabled": true,
    "zig.startUpMessage": true,
    "zig.path": "zls", // oddly enough I had to set this to zls? why isn't that default?
    "zig.debugLog": false,


    // rust
    // https://github.com/fannheyward/coc-rust-analyzer#configurations
    //    PRN rust-analyzer.*


    //
    // FYI another persons' config: https://raw.githubusercontent.com/oppara/dotfiles/611ea809e380d5b4e3e374568a85e52e744a429e/config/nvim/coc-settings.json
    "languageserver": {

        // *** csharp-ls ***
        // PRN try omnisharp-roslyn instead of csharp-ls (download archive from https://github.com/OmniSharp/omnisharp-roslyn/releases)
        //     and dotnet-format for formatting?
        // csharp-ls is supposed to be faster than omnisharp-roslyn, and not require heavy deps (i.e. mono on mac/linux)
        "csharp-ls": {
            // hit-enter - several long messages on startup, to avoid needing to hit Enter:
            //   happens when cmdheight=1 and not big enough to show full message (IIUC tT in shortmess don't apply to this b/c Ex mode)
            //   *** zoom out so messages fit
            //   *** hit `q` to stop listing messages (or j key, then use g< to see all messages if needed, before next cmd runs)
            //   set cmdheight=2 (yuck)
            //   see :h hit-enter (in message.txt)
            //       g< - see messages from last cmd (msgs before q)
            //
            "command": "csharp-ls",
            "filetypes": [ "cs" ],
            "rootPatterns": [ "*.csproj", ".vim/", ".git/", ".hg/" ],
        },

        // https://github.com/ndonfris/fish-lsp#client-configuration-required
        // EXAMPLES: https://github.com/ndonfris/fish-lsp-language-clients
        //    https://github.com/ndonfris/fish-lsp-language-clients/tree/coc_example // TODO review other files in this example to incoporate (ie keymaps for coc)
        //    https://github.com/ndonfris/fish-lsp-language-clients/tree/coc_minimal
        //    https://github.com/ndonfris/fish-lsp-language-clients/tree/native-nvim
        // FORMATTER:
        //    uses `fish-indent foo.fish` # no options AFAIK to configure
        // config discussions: https://github.com/ndonfris/fish-lsp/discussions
        "fish-lsp": {
            "command": "fish-lsp",
            "filetypes": [
                "fish"
            ],
            "env": {
                // *** run:    `fish-lsp env` to see current/default config
                // https://github.com/ndonfris/fish-lsp?tab=readme-ov-file#environment-variables
                // 2003 is warning about universal variables in a non-interactive context, F it... I don't care... I use them in my ask-openai.fish script which is used in interactive contexts to change ask settings
                "fish_lsp_diagnostic_disable_error_codes": "2003 2001",
                // 2001 is non-escaped expansion variable in single quote string (fish-lsp 2001) => but that is precisely why I am using single quotes... so don't warn me that I might've mean to use double quotes... you are gonna flag legitimate use of the single quotes (in fact the entire purpose is arguably for this scenario)
            },
            "args": [
                "start"
            ],
            "revealOutputChannelOn": "info",
            "initializationOptions": {
                "workspaces": {
                    "paths": {
                        "defaults": [
                            // IIUC these provide paths for symbols and other definitions from primary fish config files and brew installed share/fish files
                            "$HOME/.config/fish",
                            "/opt/homebrew/share/fish",
                        ]
                    }
                }
            }
        },

        "fennel": {
            // "enable": false,

            "command": "fennel-ls", --
            // see flsproject.fnl for config and notes to install, including docsets for neovim


            // this one AFAICT has no ability to help w/ vim APIs (yuck):
            // "command": "fennel-language-server", --
            // // cargo install --git https://github.com/rydesun/fennel-language-server

            "filetypes": [ "fennel" ],
            //  add rootPatterns b/c fennel doesn't have the equiv of say packages.json
            // "rootPatterns": [
            //     ".vim/",
            //     ".git/",
            //     ".hg/"
            // ],
            "trace.server": "verbose", // woa I didn't know this existed?!
        },

    },
    "snippets.ultisnips.pythonPrompt": false,


    // *** POWERSHELL ***
    "powershell.integratedConsole.showOnStartup": false,
    // WTH it still flashes momentarily, WT WT WTF

    // *** clangd (c,cpp,etc) ***
    // clangd LS bundles clangd-format (do not need to install, IIUC)
    //   (https://clang.llvm.org/docs/ClangFormat.html)
    //   respects .clang-format
    //    generate with: clang-format -style=llvm -dump-config > .clang-format
    //
    //   formatting as you type experimental feature => DEAR GOD NO...
    //
    //  clangd config: https://clangd.llvm.org/config
    // hrm.. s/b able to pass arg to clangd server...
    //   someone else has same issue: https://github.com/clangd/clangd/issues/362
    //     sounds like only .clang-format works for now
    //     IIUC the issue is the --fallback-style doesn't take a yaml string... but rather a predefined style (name) like above with --style=llvm
    //
    //   "clangd.arguments": [
    //       //      "--fallback-style={BasedOnStyle: LLVM, IndentWidth: 4, UseTab: Never}"
    //       "--fallback-style={AllowShortEnumsOnASingleLine: false}",
    //   ]
    //


    // *** sql (coc-sqlfluff) ***
    // this has many options
    // TODO I have yet to find out if I can stop line breaks around eveyr single goddamn column name in a select clause
    // they do not at all explain wtf they mean in their "reflow" docs and their options are a fucking mess of shit all over the place
    //  it will leave a one column select on its own line but beyond one it busts select|col1|col2 each onto its own goddamn line
    //    SEE my .sqlfluff config file in g0t4/usaspending repo for where I left off cuz I cant waste time on this shit right now

    // DO NOT USE coc-sql (no config to speak of)
    //    uses: https://github.com/sql-formatter-org/sql-formatter
    //          https://sql-formatter-org.github.io/sql-formatter/
    //          holy crap, this formatter has no option to NOT split a line on every single column in the select clause






}
