# I am using coc-snippets to load these and other snippets:
#   :CocList snippets
#   :CocCommand snippets.openSnippetFiles
#
# FYI I kinda wanna curate this set on my own to avoid polluting completions menu
# TODO review ideas here (lua and otherwise):
#   https://github.com/honza/vim-snippets

# TODO setup keymap to tab through args so I can support more than $1
# TODO revisit wtf is what in how setmetatable and __index works... then can add back setmetatable(self) or otherwise...
snippet class "Lua class pattern"
---@class ${1:ClassName}
local ${1:ClassName} = {}
${1}.__index = ${1}

function ${1}:new()
    self = setmetatable({}, ${1})
    ${0}
    return self
end

return ${1}

# lua, bail early from a function (can't just return)
snippet drend "do return end"
do return end


snippet schedule "schedule(func)"
vim.schedule(function()
    ${0}
end)

snippet defer_fn "vim.defer(func, ms)"
vim.defer_fn(function()
    ${0}
end,${1:1000})


# TODO not sure a1/a2 are easy enough to justify reaching for the #... find a new name?
snippet a1 "array of array"
{ ${0} }

snippet a2 "array of array"
{{ ${0} }}


# *** busted style testing (i.e. plenary)

snippet busted_file
local assert = require("luassert")
describe("$1", function()
    it("$2", function()
        $0
    end)
end)

# describe for busted tests
snippet busted_describe_it
describe("$1", function()
    it("$2", function()
        $0
    end)
end)

# describe + it
snippet busted_it
it("$1", function()
    $0
end)


snippet annotate_table_array
${1:ValueType}[]

# just cancel filling placeholders when you have enough
snippet annotate_table_literal
{ ${1:key1}: ${2:ValueType}, ${3:key2}: ${4:ValueType} }

snippet annotate_table_key_value
table<${1:KeyType}, ${2:ValueType}>

# I prefer the table<string syntax...
# instead of this recommendation on luals annotations page:
#{ [string]: ${1:ValueType} }
snippet annotate_table_dictionary
table<string, ${1:ValueType}>

# https://luals.github.io/wiki/annotations/#cast
snippet annotate_cast
---@cast ${1:variable} ${2:type}
snippet annotate_cast_add_type
---@cast ${1:variable} +${2:type}
snippet annotate_cast_remove_type
---@cast ${1:variable} -${2:type}
# skipped:
#   cast multiple types
#   cast possibly nil


snippet annotate_class
---@class ${1:ClassName}
snippet annotate_class_extends
---@class ${1:ClassName}: ${2:ParentClassName}

# skipped: @enum, @generic, @meta,
# skipped@field  (FIM does a good job w/ these)

snippet annotate_module_simulated_require
---@module "${1:module_name}"

# skipped: @nodiscard (force consumers to use result of function)

snippet annotate_vararg
---@vararg ${1:type}

snippet diagnostics_disable_unused_functions
---@diagnostic disable-next-line: unused-function

snippet diagnostics_disable_unused_locals
---@diagnostic disable-next-line: unused-local

snippet diagnostics_disable_all_unused
---@diagnostic disable-next-line: unused-function, unused-local

